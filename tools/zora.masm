
lines {
    #TMP_A_OE
    #TMP_B_OE
    #PC_OE
    #SP_OE
    FLAGS_SEL
    IO_M
    WE
    RE

    free4
    free5
    #PC_LOAD_EN
    PC_CNT_EN
    Cin_EN
    ALUOP_0
    ALUOP_1
    ALUOP_2
    
    // these are really active high, this is just a trick
    // to force the default inactive state to be 0xF
    #OE_ENCL_0
    #OE_ENCL_1
    #OE_ENCL_2
    #OE_ENCL_3
    #CLK_ENCL_0
    #CLK_ENCL_1
    #CLK_ENCL_2
    #CLK_ENCL_3

    free1
    free2
    free3
    #RESET
    HALT
    FLAG_S0
    FLAG_S1
    FLAG_S2
}

define {
    // BEGIN: encoded /OE lines
    R0_OE {
        OE_ENCL_0
        OE_ENCL_1
        OE_ENCL_2
        OE_ENCL_3
    }
    R1_OE {
        OE_ENCL_1
        OE_ENCL_2
        OE_ENCL_3
    }
    R2_OE {
        OE_ENCL_0
        OE_ENCL_2
        OE_ENCL_3
    }
    R3_OE {
        OE_ENCL_2
        OE_ENCL_3
    }
    R4_OE {
        OE_ENCL_0
        OE_ENCL_1
        OE_ENCL_3
    }
    R5_OE {
        OE_ENCL_1
        OE_ENCL_3
    }
    R6_OE {
        OE_ENCL_0
        OE_ENCL_3
    }
    R7_OE {
        OE_ENCL_3
    }

    FLAGS_OE {
        OE_ENCL_0
        OE_ENCL_1
        OE_ENCL_2
    }
    PC_H_OE {
        OE_ENCL_1
        OE_ENCL_2
    }
    PC_L_OE {
        OE_ENCL_0
        OE_ENCL_2
    }
    SP_ALUB_OE {
        OE_ENCL_2
    }
    ALU_OE {
        OE_ENCL_0
        OE_ENCL_1
    }
    // END: encoded /OE lines
    // BEGIN: encoded CLK lines
    R0_CLK_EN {
        CLK_ENCL_0
        CLK_ENCL_1
        CLK_ENCL_2
        CLK_ENCL_3
    }
    R1_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_2
        CLK_ENCL_3
    }
    R2_CLK_EN {
        CLK_ENCL_0
        CLK_ENCL_2
        CLK_ENCL_3
    }
    R3_CLK_EN {
        CLK_ENCL_2
        CLK_ENCL_3
    }
    R4_CLK_EN {
        CLK_ENCL_0
        CLK_ENCL_1
        CLK_ENCL_3
    }
    R5_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_3
    }
    R6_CLK_EN {
        CLK_ENCL_0
        CLK_ENCL_3
    }
    R7_CLK_EN {
        CLK_ENCL_3
    }

    SP_CLK_DOWN {
        CLK_ENCL_0
        CLK_ENCL_1
        CLK_ENCL_2
    }
    PC_H_CLK {
        CLK_ENCL_1
        CLK_ENCL_2
    }
    SP_CLK_UP {
        CLK_ENCL_0
        CLK_ENCL_2
    }
    SP_LOAD {
        CLK_ENCL_2
    }
    IR_CLK_EN {
        CLK_ENCL_0
        CLK_ENCL_1
    }
    TMP_A_CLK {
        CLK_ENCL_1
    }
    TMP_B_CLK {
        CLK_ENCL_0
    }
    // END: encoded CLK lines
    // BEGIN: ALU OPs
    ALUOP_XOR {
        ALUOP_2
    }
    // END: ALU OPs
    FETCH_T0 {
        PC_OE
        RE
        IR_CLK_EN
        PC_CNT_EN
    }
    FETCH_T1 {
        PC_OE
        RE
        IR_INDEX_CLK
        PC_CNT_EN
    }
    PASS_A {
        TMP_A_OE
        ALU_OE
        ALUOP_XOR
    }
    PASS_B {
        TMP_B_OE
        ALU_OE
        ALUOP_XOR
    }
    PUSH_DB {
        SP_OE
        WE
    }
}

instructions {

    // an instriction is always 2 bytes (16 bit):
    // ADDR: 0  1  2  3  4 ..
    // DATA: B0 B1 ..........
    //       |---|
    //    instruction
    //
    // B0: is directly tied to HW decoders to select registers
    // b7 b6 b5 b4 b3 b2 b1 b0
    // |---------| |---------|
    // source 1    source 2 and destination
    // 0b0xxx -> GP regs
    // 0b1xxx -> special regs, ex.: PC, SP, etc..
    //
    // B1:
    // b7 b6 b5 b4 b3 b2 b1 b0
    // |------| |------------|
    // ALU OP   micro code index
    // ALU OP is hardwired to the ALU (Am25LS2517 op codes)
    // micro code index is an address to the micro code ROM

    NOP {
        T0 {
            FETCH_T0
        }
        T1 {
            RESET
        }
    }

    MOV r0, r1 {
        T0 {
            FETCH_T0
        }
        T1 {
            R0_OE
            TMP_A_CLK
        }
        T2 {
            PASS_A
            R1_CLK_EN
        }
        T3 {
            RESET
        }
    }

    // load the immediate value m to register rx
    LD m, r0 {
        T0 {
            FETCH_T0
        }
        T1 {
            PC_OE
            RE            
            PC_CNT_EN
            R0_CLK_EN
        }
        T2 {
            RESET
        }
    }

    CALL m {
        T0 {
            FETCH_T0
        }
        T1 {
            PC_H_OE
            TMP_A_CLK
        }
        T2 {
            PASS_A
            PUSH_DB
        }
        T3 {
            SP_CLK_DOWN
        }
        T4 {
            PC_L_OE
            TMP_A_CLK
        }
        T5 {
            PASS_A
            PUSH_DB
        }
        T6 {
            // put to DB from RAM
            PC_OE
            PC_CNT_EN
            RE
            // latch high address
            PC_H_CLK
        }
        T7 {
            PC_OE
            RE
            PC_LOAD_EN
            SP_CLK_DOWN
        }
    }
}