
lines {
    // AR OE
    // #AR OE 

    #R0_OE
    #TMP_OE
    #PC_OE
    #SP_OE
    #PC_LOAD_EN
    PC_CNT_EN
    WE
    RE
    
    #COND_uJMP
    #IO_M
    #RESET
    #HALT
    Cin_EN
    ALUOP_0
    ALUOP_1
    ALUOP_2
    
    // these are not directly used; they are fed into decoders. see defines
    #OE_ENCL_1
    #OE_ENCL_2
    #OE_ENCL_4
    #OE_ENCL_8
    #CLK_ENCL_1
    #CLK_ENCL_2
    #CLK_ENCL_4
    #CLK_ENCL_8
}

define {
    // BEGIN: encoded /OE lines
    ALU_OE {
        OE_ENCL_1
        OE_ENCL_2
        OE_ENCL_4
        OE_ENCL_8
    }
    R1_OE {
        OE_ENCL_2
        OE_ENCL_4
        OE_ENCL_8
    }
    R2_OE {
        OE_ENCL_1
        OE_ENCL_4
        OE_ENCL_8
    }
    R3_OE {
        OE_ENCL_4
        OE_ENCL_8
    }
    R4_OE {
        OE_ENCL_1
        OE_ENCL_2
        OE_ENCL_8
    }
    R5_OE {
        OE_ENCL_2
        OE_ENCL_8
    }
    R6_OE {
        OE_ENCL_1
        OE_ENCL_8
    }
    // 7
    FLAGS_SEL {
        OE_ENCL_8
    }

    // 8
    FLAGS_OE_DB {
        OE_ENCL_1
        OE_ENCL_2
        OE_ENCL_4
    }
    // 9
    PC_H_OE {
        OE_ENCL_2
        OE_ENCL_4
    }
    // 10
    PC_L_OE {
        OE_ENCL_1
        OE_ENCL_4
    }
    // 11
    SP_DB_OE {
        OE_ENCL_4
    }
    // 12
    CLI {
        OE_ENCL_1
        OE_ENCL_2
    }
    // 13
    SEI {
        OE_ENCL_2
    }
    // 14
    INTA {
        OE_ENCL_1
    }
    // END: encoded /OE lines
    // BEGIN: encoded CLK lines
    R0_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_2
        CLK_ENCL_4
        CLK_ENCL_8
    }
    R1_CLK_EN {
        CLK_ENCL_2
        CLK_ENCL_4
        CLK_ENCL_8
    }
    R2_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_4
        CLK_ENCL_8
    }
    R3_CLK_EN {
        CLK_ENCL_4
        CLK_ENCL_8
    }
    R4_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_2
        CLK_ENCL_8
    }
    R5_CLK_EN {
        CLK_ENCL_2
        CLK_ENCL_8
    }
    R6_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_8
    }
    FLAGS_CLK_EN {
        CLK_ENCL_8
    }

    // 8
    SP_POSTDEC {
        CLK_ENCL_1
        CLK_ENCL_2
        CLK_ENCL_4
    }
    // 9
    AHR_CLK {
        CLK_ENCL_2
        CLK_ENCL_4
    }
    // 10
    SP_POSTINC {
        CLK_ENCL_1
        CLK_ENCL_4
    }
    // 11
    SP_LOAD {
        CLK_ENCL_4
    }
    // 12
    IR_CLK_EN {
        CLK_ENCL_1
        CLK_ENCL_2
    }
    // 13
    TMP_CLK {
        CLK_ENCL_2
    }
    // 14
    ALR_CLK {
        CLK_ENCL_1
    }
    // END: encoded CLK lines
    // BEGIN: ALU OPs
    ALUOP_XOR {
        ALUOP_2
    }
    ALUOP_AND {
        ALUOP_1
        ALUOP_2
    }
    ALUOP_ADD {
        ALUOP_0
        ALUOP_1
    }
    // END: ALU OPs
    FETCH_T0 {
        PC_OE
        RE
        IR_CLK_EN
        PC_CNT_EN
    }

    AR_OE {
        PC_OE
        SP_OE
    }

    PCOE_POSTINC_RE {
        PC_OE
        PC_CNT_EN
        RE
    }

    PASS_A {
        R0_OE
        ALU_OE
        ALUOP_XOR
    }
    PASS_TMP {
        TMP_OE
        ALU_OE
        ALUOP_XOR
    }
    ADD_A_TMP {
        R0_OE
        TMP_OE
        ALUOP_ADD
    }

    // stack pushes
    PUSH_DB {
        SP_OE
        WE
    }
    PUSH_PC_H_POSTDEC {
        PC_H_OE
        PUSH_DB
        SP_POSTDEC
    }
    PUSH_PC_L_POSTDEC {
        PC_L_OE
        PUSH_DB
        SP_POSTDEC
    }
}

instructions {

    // some opcoded are partially hardwired:
    // all the conditional jumps use the lower 3 bits of the instruction
    // to select flag bit, ie. zero flag, carry flag, etc.
    // bit4 (counting from bit0) is wired to invert the condition bit


    //// BRANCHING AND PROGRAM FLOW ////
    NOP {
        T0 {
            FETCH_T0
        }
        T1 {
            RESET
        }
    }

    HLT {
        T0 {
            FETCH_T0
        }
        T1 {
            HALT            
        }
        T2 {
            RESET
        }
    }

    CLI {
        T0 {
            FETCH_T0
        }
        T1 {
            CLI
        }
        T3 {
            RESET
        }
    }

    SEI {
        T0 {
            FETCH_T0
        }
        T1 {
            SEI
        }
        T3 {
            RESET
        }
    }

    IN m {
        T0 {
            FETCH_T0
        }
        T1 {
            // load 0 (databus has pull downs)
            AHR_CLK
        }
        T2 {
            PCOE_POSTINC_RE
            ALR_CLK
        }
        T3 {
            // read to accumulator from IO
            AR_OE
            IO_M
            RE
            R0_CLK_EN
        }
        T4 {
            RESET
        } 
    }

    OUT m {
        * IN m {}
        T3 {
            // write accumulator to IO
            AR_OE
            PASS_A
            IO_M
            WE
        }
    }

    // like RET, but re-enables interrupts as well
    RETI {
        T0 {
            FETCH_T0
        }
        T1 {
            SP_POSTINC
        }
        T2 {
            SP_OE
            RE
            AHR_CLK
        }
        T3 {
            SP_POSTINC
        }
        T4 {
            SP_OE
            RE
            PC_LOAD_EN
            SEI
        }
        T5 {
            RESET
        }
    }


    0x08 JMP.S m {
        T0 {
            FETCH_T0
        }
        T1 {
            COND_uJMP
        }
        T2 {
            PCOE_POSTINC_RE
            AHR_CLK
        }
        T3 {
            PC_OE
            RE
            PC_LOAD_EN
        }
        T4 {
            RESET
        }
        // micro counter will jump here if branch miss occured
        T5 {
            PC_CNT_EN
        }
        T6 {
            PC_CNT_EN
        }
        T7 {
            RESET
        }
    }
    JMP.Z m {
        *
    }
    JMP.V m {
        *
    }
    JMP.C m {
        *
    }
    JMP.A m {
        *
    }

    JMP m {
        T0 {
            FETCH_T0
        }
        T1 {
            PCOE_POSTINC_RE
            AHR_CLK
        }
        T2 {
            PC_OE
            RE
            PC_LOAD_EN
        }
        T3 {
            RESET
        }
    }

    CALL m {
        T0 {
            FETCH_T0
        }
        T1 {
            PUSH_PC_L_POSTDEC
        }
        T2 {
            PUSH_PC_H_POSTDEC
        }
        T3 {
            // put to DB from RAM
            PCOE_POSTINC_RE
            // load high address
            AHR_CLK
        }
        T4 {
            PC_OE
            RE
            PC_LOAD_EN
        }
        T5 {
            RESET
        }
    }

    RET {
        T0 {
            FETCH_T0
        }
        T1 {
            SP_POSTINC
        }
        T2 {
            SP_OE
            RE
            AHR_CLK
        }
        T3 {
            SP_POSTINC
        }
        T4 {
            SP_OE
            RE
            PC_LOAD_EN
        }
        T5 {
            PC_CNT_EN
        }
        T6 {
            PC_CNT_EN
        }
        T7 {
            RESET
        }
    }

    0x10 JMP.NS m {

    }
    JMP.NZ m {

    }
    JMP.NV m {
        
    }
    JMP.NC m {
        
    }
    JMP.NA m {
        
    }

    //// DATA MOVEMENT ////

    // MOV r0, rx
    0x15 MOV r0, r1 {
        T0 {
            FETCH_T0
        }
        T1 {
            PASS_A
            R1_CLK_EN
        }
        T2 {
            RESET
        }
    }
    MOV r0, r2 {
        * MOV r0, r1 {}
        T1 {
            PASS_A
            R2_CLK_EN
        }
    }
    MOV r0, r3 {
        * MOV r0, r1 {}
        T1 {
            PASS_A
            R3_CLK_EN
        }
    }
    MOV r0, r4 {
        * MOV r0, r1 {}
        T1 {
            PASS_A
            R4_CLK_EN
        }
    }
    MOV r0, r5 {
        * MOV r0, r1 {}
        T1 {
            PASS_A
            R5_CLK_EN
        }
    }
    MOV r0, r6 {
        * MOV r0, r1 {}
        T1 {
            PASS_A
            R6_CLK_EN
        }
    }

    // MOV r1, rx
    MOV r1, r0 {
        T0 {
            FETCH_T0
        }
        T1 {
            R1_OE
            TMP_CLK
        }
        T2 {
            PASS_TMP
            R0_CLK_EN
        }
        T3 {
            RESET
        }
    }
    MOV r1, r2 {
        * MOV r1, r0 {}
        T2 {
            PASS_TMP
            R2_CLK_EN
        }
    }
    MOV r1, r3 {
        * MOV r1, r0 {}
        T2 {
            PASS_TMP
            R3_CLK_EN
        }
    }
    MOV r1, r4 {
        * MOV r1, r0 {}
        T2 {
            PASS_TMP
            R4_CLK_EN
        }
    }
    MOV r1, r5 {
        * MOV r1, r0 {}
        T2 {
            PASS_TMP
            R5_CLK_EN
        }
    }
    MOV r1, r6 {
        * MOV r1, r0 {}
        T2 {
            PASS_TMP
            R6_CLK_EN
        }
    }

    // load the immediate value imm to register rx
    0x39 LD imm, r0 {
        T0 {
            FETCH_T0
        }
        T1 {
            PCOE_POSTINC_RE
            R0_CLK_EN
        }
        T2 {
            RESET
        }
    }
    LD imm, r1 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R1_CLK_EN
        }
    }
    LD imm, r2 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R2_CLK_EN
        }
    }
    LD imm, r3 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R3_CLK_EN
        }
    }
    LD imm, r4 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R4_CLK_EN
        }
    }
    LD imm, r5 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R5_CLK_EN
        }
    }
    LD imm, r6 {
        * LD imm, r0 {}
        T1 {
            PCOE_POSTINC_RE
            R6_CLK_EN
        }
    }

    // load value stored at m to register rx
    0x40 LD m, r0 {
        T0 {
            FETCH_T0
        }
        T1 {
            PCOE_POSTINC_RE
            AHR_CLK
        }
        T2 {
            PCOE_POSTINC_RE
            ALR_CLK
        }
        T3 {
            AR_OE
            RE
            R0_CLK_EN
        }
        T4 {
            RESET
        }
    }

    // load accumulator (r0) from address held in pair rHL
    0x47 LDA r12 {
        T0 {
            FETCH_T0
        }
        T1 {
            R1_OE
            AHR_CLK
        }
        T2 {
            R2_OE
            ALR_CLK
        }
        T3 {
            AR_OE
            RE
            R0_CLK_EN
        }
        T4 {
            RESET
        }
    }

    // store value in rx to address m
    0x4D ST r0, m {
        T0 {
            FETCH_T0
        }
        T1 {
            PCOE_POSTINC_RE
            AHR_CLK
        }
        T2 {
            PCOE_POSTINC_RE
            ALR_CLK
        }
        T3 {
            AR_OE
            PASS_A
            WE
        }
        T4 {
            RESET
        }
    }

    // store accumulator (r0) in address held in pair rHL
    0x54 STA r12 {
         
    }
    STA r34 {

    }
    STA r56 {

    }

    // read from IO at address m to rx
    0x57 IN m, r0 {

    }

    // read from IO address held in rx to r0
    0x5E INA r1 {

    }

    // write from rx to IO at address m
    0x64 OUT r0, m {

    }

    // write from r0 to IO address held in rx
    0x6B OUTA r1 {

    }


    //// ARITHMETIC AND LOGIC ////

    0x80 ADD r0 {
        T0 {
            FETCH_T0
        }
        T1 {
            PASS_A
            TMP_CLK
        }
        T2 {
            ADD_A_TMP
            FLAGS_CLK_EN
        }
        T3 {
            ADD_A_TMP
            ALU_OE
            R0_CLK_EN
        }
        T4 {
            RESET
        }
    }
    ADD r1 {
        * ADD r0 {}
        T1 {
            R1_OE
            TMP_CLK
        }
    }
    ADD r2 {
        * ADD r0 {}
        T1 {
            R2_OE
            TMP_CLK
        }
    }

    0x87 ADC r0 {

    }

    0x8E SUB r1 {

    }

    0x94 SBB r1 {

    }

    0x9A SUB.R r1 {

    }

    0xA0 SBB.R r1 {

    }

    0xA6 CMP r1 {

    }

    0xAC AND r1 {

    }

    0xB2 OR r1 {

    }

    0xB8 XOR r1 {

    }

    0xBE ADD imm {

    }

    ADC imm {

    }

    SUB imm {

    }

    SBB imm {

    }

    SUB.R imm {

    }

    SBB.R imm {

    }

    CMP imm {

    }

    NOT rx {
        // disable acc output; enable tmp out;
        // ALU sub => 0 + (ones comp) B = NOT B
    }

    // reads interrupt vector from databus and jumps
    // DO NOT USE DIRECTLY
    0xFF INT {
        T0 {
            PUSH_PC_L_POSTDEC
        }
        T1 {
            PUSH_PC_H_POSTDEC
        }
        T2 {
            // databus has pull down, so this will load 0 to AHR
            AHR_CLK
            // disable interrupts
            CLI
        }
        T3 {
            // INTA signals to device to output vector to databus
            INTA
            PC_LOAD_EN
        }
        T4 {
            RESET
        }
    }
}