<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Partitioning an EPROM</TITLE>
</HEAD>
<BODY>

<HR>
<P><CENTER><H2>Partitioning an EPROM</H2></CENTER>

<HR>

<P>
Let's suppose, we have reset, two interrupts with different priority,<BR>
and normal operation. (like the 6502 has).<BR>
So we reserve two address lines of the EPROM (A14 and A15),<BR>
to select between:
<UL>
<LI>normal operation
<LI>IRQ (interrupt, low priority)
<LI>NMI (interrupt, high priority)
<LI>RES (reset)
</UL>

<P>
In a processor, there also will be conditional jumps/branches.<BR>
We have to respond to the status of four flags: N,V,Z,C.<BR>
To save EPROM address lines, we use a 4:1 multiplexer to select<BR>
one of these flags, to be send into EPROM A13.<BR>
To select the flags, we need two Bits to control the multiplexer.<BR>
Fortunately, 6502 opcodes use Bit 6 and Bit 7 for that purpose.

<P>
6502 opcodes have a length of 8 Bit.<BR>
We can fetch them with a 74374 (as in the traffic light example),<BR>
and feed them into EPROM A5..A12.
<P>
EPROM A0..A4 can be connected to a 5 Bit counter (2*74163).


<HR>
<P>
Now to summarize the EPROM address lines:<BR>
<PRE>
<B>A 0.. 4</B> counter
<B>A 5..12</B> opcode 
<B>A13    </B> flag   
<B>A14..15</B> int/res
</PRE>
<P>
A13 is our flag status, and works like the normal_traffic/rush_hour<BR>
switch in our traffic light example.<BR>
A14 and A15 are the equivalent to our yellow blinkenlight switch:<BR>
when they bouth are 0, the processor works normal.


<P><IMG SRC="mpd_map.jpg">

<P>
In our traffic light example, we used A4 and A5 to divide 64 Bytes<BR>
of EPROM memory into 4 areas,<BR>
each of them filled with one "program" that had 16 entries.<BR>
When building a processor with one 27512 microcode EPROM,<BR>
we divide 64kBytes into 8 blocks, 8 kB each.<BR> 
Every block has 256 "programs"<BR>
(because there are 256 opcodes),<BR>
with up to 32 entries in every "program".
<P>
Blocks with an <B>even</B> number <B>(0,2,4,6)</B> are selected,<BR>
when the flag condition is 0 (false).<BR>
Blocks with an <B>odd</B> number <B>(1,3,5,7)</B> are selected,<BR>
when the flag condition is 1 (true).


<P>
When there is no interrupt or reset, block 0 and block 1 are<BR>
used to handle the 256 opcodes.<BR>
For all opcodes, that are no conditional jumps/branches,<BR>
the according "program" is identical in block 0 and block 1.
<P>
For our low priority interrupt, block 2 and block 3 both<BR>
contain 256 "programs".<BR>
All those 512 "programs" are identical (since the interrupt<BR>
overrides flags and opcodes).<BR>
The processor saves PC and status_register on stack,<BR>
and loads the PC with the IRQ vector.<BR>
<I>We also have to disable the level_sensitive IRQ input.</I>

<P>
Block 4 and block 5 handle the (edge triggered) NMI.<BR>
Block 6 and block 7 are responsible for the reset.

<P>
We have 32 entries for every "program", what means that the<BR>
reset signal should be active for more than 32 microcode cycles,<BR>
to ensure a correct reset operation.<BR>
<B>Warning: <I>If one "program" exceeds more than 32 entries,<BR>
it will corrupt the following/next "program",<BR>
and the assembler won't tell you about it.</I></B>

<P>
There would be a trick to get along with only two blocks<BR>
(256 "programs" each),<BR>
but it will require some additional hardware.<BR>
Since we use a latch to fetch the opcode (74374 for instance),<BR>
we could wire the outputs of another latch in parallel, that would<BR>
"take over" during reset and interrupt to generate three (fake)<BR>
opcodes, that handle RES, NMI, IRQ.<BR>
<I>We would end up with 253 usable opcodes, instead of 256.</I>


<HR>

<P>
But with a single EPROM, we won't go far.<BR>
From my own experience, it is better to go with a 24 or 32 Bit<BR>
wide microcode, because it allows us to run those EPROMs as the<BR>
slowest part of our processor.<BR>

Imagine three or four 27512, with the address lines connected together.<BR>
Some care must be taken, because the assembler still operates with<BR>
single bytes, while the EPROMs use 32 Bit longwords.<BR>
<I>In other words: assembler address = EPROM address * 4.</I>
<P>
Funny thing is, that the old DOS version of AS that I used seems<BR>
always to generate a 32kB sized binary file,<BR>
<I>regardless of the size of the input file.</I>
<P>
Decided to use this as a feature.<BR>
32kB is equal to 8k Longwords, what would cover A0..A12 of the<BR>
microcode EPROMs.<BR>
That is: our 5 Bit microcode counter, and the 8 Bit command latch.<BR>
<I>In other words: the assembler generates one of our 8 blocks !</I><BR>
(If you choose to go that way with another assembler, it could become<BR>
necessary to write a tool for expanding such files to 32kB.)


<P>
Decided to send the microcode source file 5 times through the assembler<BR>
with different "switches" set/cleared<BR>
(since there are 5 different contents, a block may have),<BR>
copy them together to one 8*32kB sized binary file, and split them into<BR>
4*64kB to fit into the four 27512 EPROMs.


<HR>
<P>
It is possible, to tell the assembler, what part of the source code to<BR>
process, and what part to ignore.<BR>
The structure for our example would look like this:
<PRE>
 IFNDEF IRQ
  IFNDEF NMI
   IFNDEF RES

    ORG $00*$20*4 ;brk
    <B>;"program" of first opcode</B>
    ORG $01*$20*4 ;lda (ind,x)
    <B>;.....</B>
    ORG $ff*$20*4 ;
    <B>;"program" of last opcode</B>

   ENDIF
  ENDIF
 ENDIF

 IFDEF IRQ
 <B>;256 identical "programs", that handle IRQ</B>
 ENDIF

 IFDEF NMI
 <B>;256 identical "programs", that handle NMI</B>
 ENDIF

 IFDEF RES
 <B>;256 identical "programs", that handle RES</B>
 ENDIF
</PRE>


<HR>

<P>
Now for the conditional jumps/branches, our main difference between block 0<BR>
and block 1.<BR>
Since the flags change at the rising edge of CLK, and jumps/branches usually<BR>
don't modify any flags,<BR>it's possible to connect the output of the flag<BR>
multiplexer directly to microcode EPROM A13.<BR>
There would be two macros:<BR>
<I>M_TBR for taking a branch, and M_NTBR for not taking a branch.</I><BR>
Bouth macros first increment PC to point to the next Byte in program memory<BR>
(what would be the branch offset).<BR>
<P>
After that moment, flags should be valid/stable, because from that point<BR>
M_NTBR only increments the PC<BR>and fetches the next opcode (as known from<BR>
M_NEXT), while M_NTBR reads the offset from data_bus<BR>
(while incrementing PC again), adds it to PC and <B>then</B> reads the next<BR>
opcode.
<P>
Selecting the flags is done by hardware (since the flag multiplexer is<BR>
controlled by two bits from the opcode).<BR>
All we have to do is to put M_NTBR into block 0 and M_TBR into block 1<BR>
if we want to jump/branch on a "true" flag condition (BCS, for instance).<BR>
For a branch on a "false" flag condition (such as BCC), put M_TBR into<BR>
block 0 and M_NTB into block 1, and that's all there is to it.


<P>
<PRE>
  ORG $90*$20*4  ;<I>bcc</I>, branch if C=0
  IFDEF FLAG_LO  ;Flag encoded by hardware
   <B>M_TBR</B>         ;take branch
  ELSEIF
   <B>M_NTBR</B>        ;not take branch
  ENDIF

  ;.....

  ORG $b0*$20*4  ;<I>bcs</I>, branch if C=1
  IFDEF FLAG_LO  ;Flag encoded by hardware
   <B>M_NTBR</B>        ;not take branch
  ELSEIF
   <B>M_TBR</B>         ;take branch
  ENDIF
</PRE>
When passing this example through the assembler, FLAG_LO is active<BR>
for block 0, and FLAG_HI is active for block 1.<BR>
For the other three assembler pass_throughs, we have to activate<BR>
IRQ, NMI, or RES.


<HR>
<P>
<A HREF="../index.htm">[HOME]</A>
<A HREF="mpd_0.htm">[UP]</A>/
<A HREF="mpd_6.htm">[BACK]</A>
<A HREF="mpd_1.htm">[1]</A>
<A HREF="mpd_2.htm">[2]</A>
<A HREF="mpd_3.htm">[3]</A>
<A HREF="mpd_4.htm">[4]</A>
<A HREF="mpd_5.htm">[5]</A>
<A HREF="mpd_6.htm">[6]</A>
[7]
<A HREF="mpd_8.htm">[8]</A>
<A HREF="mpd_8.htm">[NEXT]</A>


<P>(c) Dieter Mueller 2005
</BODY>
</HTM>
